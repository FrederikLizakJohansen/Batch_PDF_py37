[Dictionary]
load_dict   = True
# Import a dictionary if "True". Type in the directory with the desired dictionary. 

imp_dict    = TESTTEST_directory.py
# If "load_dict" is set to "True" it will look for a dict with name equal to "imp_dict", otherwise does nothing.



[Main]
load_data	= False
# If "True" reads ASCII files, if "False" will search for a folder with HDF5 file.

data_magic	= True
# If "True" checks start value, end value and grid spacing for data and background. interpolates if not equal.  

save_data	= True
# If "True" saves data in HDF5 format, data is saved after interpolation. 

PDF 		= True
# If "True" than G(r) will be calculated. For this to happen a .cfg file is needed.

gen_PDF_file= True
# If "True" G(r) will be saved in txt format 

gen_fq_file = True
# If "True" f(q) will be saved in txt format

gen_iq_file = True
# If "True" i(q) will be saved in txt format

Nyquist		= False
# If "True" grid spacing will be determined by the Nyquist-Shannon theorem. For this to be done a cfg file is needed.
# For more information see article "The Nyquist-Shannon sampling theorom and the atomic pair distribution function" by Farrow et al. 

norm		= 0
# Takes in a float and normalizes I(q). Should be given in unit of Å⁻1. 
# If norm is set to 0 the qmax from cfg is used and -1 for no normalization.



[Data]
file_name 	= Pt_L-
# Prename of the data series. E.g. whole name "Pt_L-00001.chi" gives a "file_name" = "Pt_L-". 
# The code inserts "00000" after "file_name" and increments, depending on starting value.

file_type	= .chi
# Is the format of the files.

first_file	= 2
# The first file which is imported.
# If equal 7 first file will have the extension "00007".

nr_files	= 20
# How many file the script will import starting from "first_file".

line_skip	= 4
# How number of header lines that will be skipped. This is without zero so 4 will skip 4 lines.



[Background_Data]
bg_file		= Pt_L_blank-
# This is the same os for "file_name".

bg_type		= .chi
# Same os for "file_type".

first_bg	= 10
# Same as for "first_file"

nr_bg_files	= 2
# Can be larger than "nr_files" but the first data set will get the first background file and so on. 
# If smaller than "nr_files" the last background file will be subtracked from the additional files.

bgline_skip	= 4	
# Same as "line_skip"

seq_bg 		= False
# Makes it possible to choose specific backgrounds.
# If "False" then "bg_info" will be ignored.

bg_info 	= [3, 1, 21, 2, 13, 3, 22, 10]
# Takes a list. The list should be even in length. Numbers er relative to data. 
# [3, 1, 4, 7] takes background 3 and subtracts that background from frame 1-6 and takes background 4 and subtracts from frame 7 until the end. 



[Scaling]
calib_bg	= False
# If "True" only one scaling factor will be used for background subtraction. 
# If "False" then multiple scaling factor will be determined.

auto		= True
# When "True" one or multiple scaling factors (depending on "calib_bg") will be calculated. 
# Depending on you qmin and qmax in the cfg file, the script will find highest possible scaling
# without allowing any negative values within that region.  

sumstep 	= 1
# Adds the y values of files together. 
# If "sumstep" % "nr_files" != 0 the script will return a warning. 

sumstep_bg 	= 1
# Same as for sumstep

bg_scaling 	= 0.99
# If 'auto' is 'False' then this will be the scaling factor.
# If 'auto' is 'True' then this will work as a scaling for the automatically calculated scaling factor. 
# It should be set to 0.99 as standard value. 

qnorm 		= 15.6
# This is only used if "calib_bg" is "False" and "auto" is "False", then each frame is scaled so that the background intensity matches data intensity at this q⁻1 value.



[Directories]
data_dir 	= /home/emilkjaer/School/Jette/Pt/Data
# Directory where your data files are

bg_dir		= /home/emilkjaer/School/Jette/Pt/Bkg
# Directory where your background files are

cfg_dir		= /home/emilkjaer/School/Jette/Pt
# Directory where your cfg file is and all folders and files will be saved at this directory



[PDFgetX3]
make_cfg 	= False
# Will generate a simple cfg file and then terminate so that modifications can be made. See PDFgetx3 documentation for full cfg file.
# load_dict needs to be equal to False

cfg_file	= pdfgetx3.cfg
# Name of the cfg file that you are going to use
# If make_cfg = True, then this will be its name and it will be saved at cfg_dir



[Plotting]
show_PDF 	= True
# Plots the PDF of the frame given in "pdf_file".

show_all	= True
# Plots i(q), s(q), f(q) and G(r) of same frame.

save_pics 	= True
# Saves all figures in a folder generated at the "cfg_dir". If "False" figures are shown as they are made.

pdf_file 	= 5
# Must be larger than "first_file". It cannot show 5'th frame if you start from 8'th frame.

timeframe	= 1
# Time resolution of measured data. Needs to be in seconds.



[3D_Plot]
3D_plot		= True
# Creates a 3D plot if "True".

3D_title	= 3D_plot
# Title of the 3D plot

3D_cmap		= Spectral
# Colormap used for the 3D plot. See link for more colormaps:
# https://matplotlib.org/users/colormaps.html



[Save_Dictionary]
save_dict 	= True
# If "True" a directory file is saved. This makes it easier to reproduce data and store script configurations.

dict_name 	= TESTTEST_directory
# Name of the saved dictonary.
